import Mathlib.Algebra.Ring.Basic
import Etch.C
import Etch.Op
import Etch.Basic

--notation "ùüö"  => Bool

-- marked irreducible later
def Var (_ : Type _) := String
abbrev ArrayVar (Œ± : Type _) := Var (‚Ñï ‚Üí Œ±)
def Var.mk : String ‚Üí Var Œ± := id
def Var.toString : Var Œ± ‚Üí String := id
instance : Coe String (Var Œ±) := ‚ü®Var.mk‚ü©

inductive E : Type ‚Üí Type 1
| call {Œ±} (op : Op Œ±) (args : (i : Fin op.arity) ‚Üí E (op.argTypes i)) : E Œ±
| var    : (v : Var Œ±) ‚Üí E Œ±
| access : Var (‚Ñï ‚Üí Œ±) ‚Üí E ‚Ñï ‚Üí E Œ±
| intLit : ‚Ñï ‚Üí E ‚Ñï

def E.v (Œ±) (v : String) : E Œ± := E.var v

structure HeapContext where
  store : Var Œ± ‚Üí Œ±
  heap {Œ± : Type _} : Var (‚Ñï ‚Üí Œ±) ‚Üí ‚Ñï ‚Üí Œ±

def E.eval (c : HeapContext) : E Œ± ‚Üí Œ±
| call f args => f.spec (Œª i => (args i).eval c)
| var v => c.store v
| access arr arg => c.heap arr (arg.eval c)
| intLit x => x

instance : OfNat Bool (nat_lit 0) := ‚ü® false ‚ü©
instance : OfNat Bool (nat_lit 1) := ‚ü® .true ‚ü©
instance [Tagged Œ±] [Add Œ±] : Add (E Œ±) := ‚ü® Œª a b => E.call .add ![a, b] ‚ü©
instance [Tagged Œ±] [Sub Œ±] : Sub (E Œ±) := ‚ü® Œª a b => E.call .sub ![a, b] ‚ü©
instance [Tagged Œ±] [Mul Œ±] : Mul (E Œ±) := ‚ü® Œª a b => E.call .mul ![a, b] ‚ü©
instance [Tagged Œ±] [OfNat Œ± (nat_lit 0)] : OfNat (E Œ±) (nat_lit 0) := ‚ü® E.call .zero ![] ‚ü©
instance [Tagged Œ±] [OfNat Œ± (nat_lit 1)] : OfNat (E Œ±) (nat_lit 1) := ‚ü® E.call .one ![] ‚ü©
instance : OfNat (E ‚Ñï) n := ‚ü® .intLit n ‚ü©
instance : Inhabited (E R) := ‚ü® 0 ‚ü©
--def E.ext (f : String) : E Unit := E.call (O.voidCall f) ![]

def E.compile : E Œ± ‚Üí Expr
| @call _ op args => Expr.call op.opName $ List.ofFn Œª i => E.compile (args i)
| access base i => Expr.index (Expr.var base.toString) [i.compile]
| var v => Expr.var v.toString
| intLit x => Expr.lit x

infixr:40 " << " => Œª a b => E.call Op.lt ![a, b]
infixr:40 " <·µ£ " => Œª a b => E.call Op.ofBool ![E.call Op.lt ![a, b]]
infixr:40 " == " => Œª a b => E.call Op.eq ![a, b]
infixr:40 " != " => Œª a b => E.call Op.neg ![(E.call Op.eq ![a, b])]
infixr:40 " <= " => Œª a b => E.call Op.le ![a, b]

inductive P
| seq    : P ‚Üí P ‚Üí P
| while  : E Bool ‚Üí P ‚Üí P
| branch : E Bool ‚Üí P ‚Üí P ‚Üí P
| skip   : P
| decl   [TaggedC Œ±] : Var Œ± ‚Üí E Œ± ‚Üí P
| store_var : Var Œ± ‚Üí E Œ± ‚Üí P
| store_mem : Var (‚Ñï ‚Üí Œ±) ‚Üí E ‚Ñï ‚Üí E Œ± ‚Üí P

-- needs to come after P to avoid injectivity_lemma issue
attribute [irreducible] Var

def P.if1 := Œª c t => P.branch c t P.skip
infixr:10 ";;" => P.seq

def P.compile : P ‚Üí Stmt
| seq a b => Stmt.seq a.compile b.compile
| .while cond body => Stmt.while cond.compile body.compile
| branch c a b => Stmt.conde c.compile a.compile b.compile
| skip => Stmt.noop
| @decl _ taggedC var e => Stmt.decl taggedC.tag var.toString e.compile
| store_var var e => Stmt.store (Expr.var var.toString) e.compile
| store_mem v l r => Stmt.store (Expr.index (Expr.var v.toString) [l.compile]) r.compile

def Name := List ‚Ñï
def Name.toString : Name ‚Üí String := "_".intercalate ‚àò List.map ToString.toString
def Name.fresh (n : Name) (new : ‚Ñï) : Name := new :: n
def Name.freshen (n : Name) : Name := n.fresh 0
def emptyName : Name := []

structure S (Œπ : Type _) (Œ± : Type _) where
  œÉ     : Type
  -- next_weak/next_strict?
  -- upto/past ?
  skip  : Name ‚Üí œÉ ‚Üí E Œπ ‚Üí P -- skip _ s i : if current index < i, must advance; may advance to first index ‚â• i.
  succ  : Name ‚Üí œÉ ‚Üí E Œπ ‚Üí P -- succ _ s i : if current index ‚â§ i, must advance; may advance to first index > i.
  value : œÉ ‚Üí Œ±
  ready : œÉ ‚Üí E Bool
  index : œÉ ‚Üí E Œπ
  valid : œÉ ‚Üí E Bool
  init  : Name ‚Üí P √ó œÉ

infixr:25 " ‚Üí‚Çõ " => S

section Œπ

variable {Œπ : Type} [Tagged Œπ] [DecidableEq Œπ] [LT Œπ] [DecidableRel (LT.lt : Œπ ‚Üí Œπ ‚Üí _)]
{Œ± : Type _}
(v : Var (‚Ñï ‚Üí Œ±))
(is : ArrayVar Œπ)

def Var.access := E.access v
def Var.incr [Tagged Œ±] [Add Œ±] [OfNat Œ± 1] (v : Var Œ±) : P := .store_var v $ E.var v + 1
def Var.incr_array [Tagged Œ±] [Add Œ±] [OfNat Œ± 1] (ind : E ‚Ñï) : P := .store_mem v ind $ v.access ind + 1
def Var.expr (v : Var Œ±) : E Œ± := E.var v
def Var.fresh (v : Var Œ±) (n : Name) : Var Œ± := Var.mk (v.toString ++ n.toString)
def Var.store_var (v : Var Œ±) := P.store_var v
def Var.decl [TaggedC Œ±] (v : Var Œ±) := P.decl v

instance : Coe (Var Œ±) (E Œ±) := ‚ü®E.var‚ü©

instance : Functor (S Œπ) where map := Œª f s => {s with value := f ‚àò s.value }

variable [TaggedC Œπ]

def simpleSkip (n : Name) (pos : Var ‚Ñï) (max_pos : E ‚Ñï) (tgt : E Œπ) :=
  let tmp : Var Œπ := ("temp" : Var _).fresh n
  tmp.decl tgt;;
  .while ((pos.expr << max_pos) * (is.access pos << tmp.expr)) $
    pos.incr

def searchSkip (n : Name) (pos : Var ‚Ñï) (max_pos : E ‚Ñï) (i : E Œπ) : P :=
let hi  : Var ‚Ñï := .fresh "hi"   n
let lo  : Var ‚Ñï := .fresh "lo"   n
let m   : Var ‚Ñï := .fresh "m"    n
let tgt : Var Œπ := .fresh "temp" n
let not_done : Var Bool := .fresh "not_done" n
tgt.decl i;;
lo.decl pos;;
hi.decl max_pos;;
not_done.decl 1;;
(.while ((lo.expr <= hi.expr) * not_done) $
  m.decl (E.call .mid ![lo.expr, hi.expr]) ;;
  .branch (.access is m << tgt.expr)
    (.store_var lo (m + 1))
    (.branch (tgt.expr << .access is "m")
      (.store_var hi (m - 1))
      ((.store_var not_done 0);; .store_var lo m))) ;;
  .store_var pos lo

inductive IterMethod | step | search

variable [LE Œπ] [TaggedC Œπ] [DecidableRel (LE.le : Œπ ‚Üí Œπ ‚Üí _)]

-- [lower, upper)
def S.predRange [One Œ±] (lower upper : E Œπ) : S Œπ Œ± where
  œÉ := Var Œπ
  value     _ := 1
  succ  _ _ _ := .skip
  ready     _ := 1
  skip  _ pos := pos.store_var
  index   pos := pos
  valid   pos := pos.expr << upper
  init    n   := let p := .fresh "pos" n; (p.decl lower, p)

-- [lower, upper]
def S.predRangeIncl [One Œ±] (lower upper : E Œπ) : S Œπ Œ± where
  œÉ := Var Œπ
  value     _ := 1
  succ  _ _ _ := .skip
  ready     _ := 1
  skip  _ pos := pos.store_var
  index   pos := pos
  valid   pos := pos.expr <= upper
  init  n     := let p := .fresh "pos" n; (p.decl lower, p)

def S.interval (h : IterMethod) (pos : Var ‚Ñï) (lower upper : E ‚Ñï) : S Œπ (E ‚Ñï) where
  œÉ := Var ‚Ñï
  value pos := pos.expr
  succ  _ pos i := .if1 (.access is pos.expr <= i) pos.incr
  skip  n pos := (match h with | .step => simpleSkip | .search => searchSkip) is n pos upper
  ready _   := 1
  index pos := .access is pos.expr
  valid pos := pos.expr << upper
  init  n   := let p := pos.fresh n; (p.decl lower, p)

-- todo: use instead of zero
--class Bot (Œ± : Type _) := (bot : Œ±)
--notation "‚ä•"  => Bot.bot
def S.univ [Zero Œπ] [Add Œπ] [OfNat Œπ 1] [TaggedC Œπ] (max l : Var Œπ) : S Œπ (E Œπ) where
  value last := last.expr
  succ  _ last i := .if1 (last.expr <= i) last.incr  -- imprecise but ok
  ready _    := 1
  skip  _ last := last.store_var
  index last := last.expr
  valid last := last.expr << max.expr
  init  n    := let v := l.fresh n; (v.decl 0, v)

def S.valFilter (f : Œ± ‚Üí E Bool) (s : Œπ ‚Üí‚Çõ Œ±) : Œπ ‚Üí‚Çõ Œ± :=
{ s with ready := Œª p => s.ready p * f (s.value p),
         skip := Œª n p i =>
           .branch (s.ready p)
             (.branch (f (s.value p))
               (s.skip (n.fresh 0) p i)
               (s.succ (n.fresh 0) p i;; s.skip (n.fresh 1) p i))
             (s.skip (n.fresh 0) p i) }

def dim : Var Œπ := "dim"

-- using fmap introduces a universe constraint between Œ± and Type 1 (coming from E Œπ). this is probably ok anyway
--def S.repl' {Œ± : Type 1} [Zero Œπ] (last : Var Œπ) (v : Œ±) : S Œπ Œ± := (Function.const _ v) <$> (S.univ last)
--def S.repl [Zero Œπ] (last : Var Œπ) (v : Œ±) : S Œπ Œ± := {S.univ last with value := Œª _ => v}
def S.function [Zero Œπ] [Add Œπ] [OfNat Œπ 1] (last : Var Œπ) (f : E Œπ ‚Üí Œ±) : S Œπ Œ± := f <$> S.univ dim last

structure csr (Œπ Œ± : Type _) := (i : Var (‚Ñï ‚Üí Œπ)) (v : Var (‚Ñï ‚Üí Œ±)) (var : Var ‚Ñï)

def csr.of (name : String) (n : ‚Ñï) (Œπ := ‚Ñï) : csr Œπ ‚Ñï :=
  let field {Œπ} (x : String) : Var Œπ := Var.mk $ name ++ n.repr ++ x
  { i := field "_crd", v := field "_pos", var := field "_i" }

def csr.level (h : IterMethod) (vars : csr Œπ ‚Ñï) (loc : E ‚Ñï) : Œπ ‚Üí‚Çõ (E ‚Ñï) :=
  S.interval vars.i h vars.var (.access vars.v loc) (vars.v.access (loc+1))
def S.level {f} [Functor f] (h : IterMethod) : csr Œπ ‚Ñï ‚Üí f (E ‚Ñï) ‚Üí f (Œπ ‚Üí‚Çõ (E ‚Ñï)) := Functor.map ‚àò csr.level h
def S.leaf  {f} [Functor f] : Var (‚Ñï ‚Üí Œ±) ‚Üí f (E ‚Ñï) ‚Üí f (E Œ±) := Functor.map ‚àò E.access
--def S.leaf' : Var Œ± ‚Üí E ‚Ñï ‚Üí E Œ± := E.access
def Contraction (Œ± : Type _) := (Œπ : Type) √ó TaggedC Œπ √ó S Œπ Œ±
--structure Contraction (Œ± : Type _) where
--  f : Type _ ‚Üí Type _
--  h : Functor f
--  v  : f Œ±
--def Contraction {f : Type ‚Üí Type _ ‚Üí Type _} (Œ± : Type _) := (Œπ : Type) √ó f Œπ Œ±
--instance : Functor Contraction where map := Œª f ‚ü®F, h, v‚ü© => ‚ü®F, h, f <$> v‚ü©
instance : Functor Contraction where map := Œª f ‚ü®Œπ, t·µ¢, v‚ü© => ‚ü®Œπ, t·µ¢, f <$> v‚ü©
def S.contract [inst : TaggedC Œπ] (s : S Œπ Œ±) : Contraction Œ± := ‚ü®_, inst, s‚ü©

end Œπ

def Fun (Œπ Œ± : Type _) := E Œπ ‚Üí Œ±
infixr:25 " ‚Üí‚Çê "  => Fun -- arbitrarily chosen for ease of typing: \ra
example : (‚Ñï ‚Üí‚Çê ‚Ñï ‚Üí‚Çõ ‚Ñï) = (‚Ñï ‚Üí‚Çê (‚Ñï ‚Üí‚Çõ ‚Ñï)) := rfl
def Fun.un (h : Œπ ‚Üí‚Çê Œ±) : E Œπ ‚Üí Œ± := h
def Fun.of (h : E Œπ ‚Üí Œ±) : Œπ ‚Üí‚Çê Œ± := h
instance : Functor (Fun Œπ) where map := Œª f v => f ‚àò v

def range : ‚Ñï ‚Üí‚Çê E ‚Ñï := id

def seqInit (a : S Œπ Œ±) (b : S Œπ Œ≤) (n : Name) :=
let (ai, as) := a.init (n.fresh 0);
let (bi, bs) := b.init (n.fresh 1);
(ai ;; bi, (as, bs))
